/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 7.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGSimplePTTSettings.h
 *
 * Simple PTT settings
 */

#ifndef SWGSimplePTTSettings_H_
#define SWGSimplePTTSettings_H_

#include <QJsonObject>


#include "SWGRollupState.h"
#include <QString>

#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGSimplePTTSettings: public SWGObject {
public:
    SWGSimplePTTSettings();
    SWGSimplePTTSettings(QString* json);
    virtual ~SWGSimplePTTSettings();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGSimplePTTSettings* fromJson(QString &jsonString) override;

    QString* getTitle();
    void setTitle(QString* title);

    qint32 getRgbColor();
    void setRgbColor(qint32 rgb_color);

    qint32 getRxDeviceSetIndex();
    void setRxDeviceSetIndex(qint32 rx_device_set_index);

    qint32 getTxDeviceSetIndex();
    void setTxDeviceSetIndex(qint32 tx_device_set_index);

    qint32 getRx2TxDelayMs();
    void setRx2TxDelayMs(qint32 rx2_tx_delay_ms);

    qint32 getTx2RxDelayMs();
    void setTx2RxDelayMs(qint32 tx2_rx_delay_ms);

    qint32 getVox();
    void setVox(qint32 vox);

    qint32 getVoxEnable();
    void setVoxEnable(qint32 vox_enable);

    qint32 getVoxLevel();
    void setVoxLevel(qint32 vox_level);

    qint32 getVoxHold();
    void setVoxHold(qint32 vox_hold);

    QString* getAudioDeviceName();
    void setAudioDeviceName(QString* audio_device_name);

    qint32 getGpioControl();
    void setGpioControl(qint32 gpio_control);

    qint32 getRx2txGpioEnable();
    void setRx2txGpioEnable(qint32 rx2tx_gpio_enable);

    qint32 getRx2txGpioMask();
    void setRx2txGpioMask(qint32 rx2tx_gpio_mask);

    qint32 getRx2txGpioValues();
    void setRx2txGpioValues(qint32 rx2tx_gpio_values);

    qint32 getRx2txCommandEnable();
    void setRx2txCommandEnable(qint32 rx2tx_command_enable);

    QString* getRx2txCommand();
    void setRx2txCommand(QString* rx2tx_command);

    qint32 getTx2rxGpioEnable();
    void setTx2rxGpioEnable(qint32 tx2rx_gpio_enable);

    qint32 getTx2rxGpioMask();
    void setTx2rxGpioMask(qint32 tx2rx_gpio_mask);

    qint32 getTx2rxGpioValues();
    void setTx2rxGpioValues(qint32 tx2rx_gpio_values);

    qint32 getTx2rxCommandEnable();
    void setTx2rxCommandEnable(qint32 tx2rx_command_enable);

    QString* getTx2rxCommand();
    void setTx2rxCommand(QString* tx2rx_command);

    qint32 getUseReverseApi();
    void setUseReverseApi(qint32 use_reverse_api);

    QString* getReverseApiAddress();
    void setReverseApiAddress(QString* reverse_api_address);

    qint32 getReverseApiPort();
    void setReverseApiPort(qint32 reverse_api_port);

    qint32 getReverseApiFeatureSetIndex();
    void setReverseApiFeatureSetIndex(qint32 reverse_api_feature_set_index);

    qint32 getReverseApiFeatureIndex();
    void setReverseApiFeatureIndex(qint32 reverse_api_feature_index);

    SWGRollupState* getRollupState();
    void setRollupState(SWGRollupState* rollup_state);


    virtual bool isSet() override;

private:
    QString* title;
    bool m_title_isSet;

    qint32 rgb_color;
    bool m_rgb_color_isSet;

    qint32 rx_device_set_index;
    bool m_rx_device_set_index_isSet;

    qint32 tx_device_set_index;
    bool m_tx_device_set_index_isSet;

    qint32 rx2_tx_delay_ms;
    bool m_rx2_tx_delay_ms_isSet;

    qint32 tx2_rx_delay_ms;
    bool m_tx2_rx_delay_ms_isSet;

    qint32 vox;
    bool m_vox_isSet;

    qint32 vox_enable;
    bool m_vox_enable_isSet;

    qint32 vox_level;
    bool m_vox_level_isSet;

    qint32 vox_hold;
    bool m_vox_hold_isSet;

    QString* audio_device_name;
    bool m_audio_device_name_isSet;

    qint32 gpio_control;
    bool m_gpio_control_isSet;

    qint32 rx2tx_gpio_enable;
    bool m_rx2tx_gpio_enable_isSet;

    qint32 rx2tx_gpio_mask;
    bool m_rx2tx_gpio_mask_isSet;

    qint32 rx2tx_gpio_values;
    bool m_rx2tx_gpio_values_isSet;

    qint32 rx2tx_command_enable;
    bool m_rx2tx_command_enable_isSet;

    QString* rx2tx_command;
    bool m_rx2tx_command_isSet;

    qint32 tx2rx_gpio_enable;
    bool m_tx2rx_gpio_enable_isSet;

    qint32 tx2rx_gpio_mask;
    bool m_tx2rx_gpio_mask_isSet;

    qint32 tx2rx_gpio_values;
    bool m_tx2rx_gpio_values_isSet;

    qint32 tx2rx_command_enable;
    bool m_tx2rx_command_enable_isSet;

    QString* tx2rx_command;
    bool m_tx2rx_command_isSet;

    qint32 use_reverse_api;
    bool m_use_reverse_api_isSet;

    QString* reverse_api_address;
    bool m_reverse_api_address_isSet;

    qint32 reverse_api_port;
    bool m_reverse_api_port_isSet;

    qint32 reverse_api_feature_set_index;
    bool m_reverse_api_feature_set_index_isSet;

    qint32 reverse_api_feature_index;
    bool m_reverse_api_feature_index_isSet;

    SWGRollupState* rollup_state;
    bool m_rollup_state_isSet;

};

}

#endif /* SWGSimplePTTSettings_H_ */
