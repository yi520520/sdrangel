/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 7.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGIEEE_802_15_4_ModSettings.h
 *
 * IEEE_802_15_4_Mod
 */

#ifndef SWGIEEE_802_15_4_ModSettings_H_
#define SWGIEEE_802_15_4_ModSettings_H_

#include <QJsonObject>


#include "SWGChannelMarker.h"
#include "SWGRollupState.h"
#include <QString>

#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGIEEE_802_15_4_ModSettings: public SWGObject {
public:
    SWGIEEE_802_15_4_ModSettings();
    SWGIEEE_802_15_4_ModSettings(QString* json);
    virtual ~SWGIEEE_802_15_4_ModSettings();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGIEEE_802_15_4_ModSettings* fromJson(QString &jsonString) override;

    qint64 getInputFrequencyOffset();
    void setInputFrequencyOffset(qint64 input_frequency_offset);

    qint32 getModulation();
    void setModulation(qint32 modulation);

    qint32 getBitRate();
    void setBitRate(qint32 bit_rate);

    qint32 getSubGHzBand();
    void setSubGHzBand(qint32 sub_g_hz_band);

    float getRfBandwidth();
    void setRfBandwidth(float rf_bandwidth);

    float getGain();
    void setGain(float gain);

    qint32 getChannelMute();
    void setChannelMute(qint32 channel_mute);

    qint32 getRepeat();
    void setRepeat(qint32 repeat);

    float getRepeatDelay();
    void setRepeatDelay(float repeat_delay);

    qint32 getRepeatCount();
    void setRepeatCount(qint32 repeat_count);

    qint32 getRampUpBits();
    void setRampUpBits(qint32 ramp_up_bits);

    qint32 getRampDownBits();
    void setRampDownBits(qint32 ramp_down_bits);

    qint32 getRampRange();
    void setRampRange(qint32 ramp_range);

    qint32 getModulateWhileRamping();
    void setModulateWhileRamping(qint32 modulate_while_ramping);

    qint32 getLpfTaps();
    void setLpfTaps(qint32 lpf_taps);

    qint32 getBbNoise();
    void setBbNoise(qint32 bb_noise);

    qint32 getWriteToFile();
    void setWriteToFile(qint32 write_to_file);

    qint32 getSpectrumRate();
    void setSpectrumRate(qint32 spectrum_rate);

    QString* getData();
    void setData(QString* data);

    qint32 getRgbColor();
    void setRgbColor(qint32 rgb_color);

    QString* getTitle();
    void setTitle(QString* title);

    qint32 getStreamIndex();
    void setStreamIndex(qint32 stream_index);

    qint32 getUseReverseApi();
    void setUseReverseApi(qint32 use_reverse_api);

    QString* getReverseApiAddress();
    void setReverseApiAddress(QString* reverse_api_address);

    qint32 getReverseApiPort();
    void setReverseApiPort(qint32 reverse_api_port);

    qint32 getReverseApiDeviceIndex();
    void setReverseApiDeviceIndex(qint32 reverse_api_device_index);

    qint32 getReverseApiChannelIndex();
    void setReverseApiChannelIndex(qint32 reverse_api_channel_index);

    qint32 getScramble();
    void setScramble(qint32 scramble);

    qint32 getPolynomial();
    void setPolynomial(qint32 polynomial);

    qint32 getPulseShaping();
    void setPulseShaping(qint32 pulse_shaping);

    float getBeta();
    void setBeta(float beta);

    qint32 getSymbolSpan();
    void setSymbolSpan(qint32 symbol_span);

    qint32 getUdpEnabled();
    void setUdpEnabled(qint32 udp_enabled);

    qint32 getUdpBytesFormat();
    void setUdpBytesFormat(qint32 udp_bytes_format);

    QString* getUdpAddress();
    void setUdpAddress(QString* udp_address);

    qint32 getUdpPort();
    void setUdpPort(qint32 udp_port);

    SWGChannelMarker* getChannelMarker();
    void setChannelMarker(SWGChannelMarker* channel_marker);

    SWGRollupState* getRollupState();
    void setRollupState(SWGRollupState* rollup_state);


    virtual bool isSet() override;

private:
    qint64 input_frequency_offset;
    bool m_input_frequency_offset_isSet;

    qint32 modulation;
    bool m_modulation_isSet;

    qint32 bit_rate;
    bool m_bit_rate_isSet;

    qint32 sub_g_hz_band;
    bool m_sub_g_hz_band_isSet;

    float rf_bandwidth;
    bool m_rf_bandwidth_isSet;

    float gain;
    bool m_gain_isSet;

    qint32 channel_mute;
    bool m_channel_mute_isSet;

    qint32 repeat;
    bool m_repeat_isSet;

    float repeat_delay;
    bool m_repeat_delay_isSet;

    qint32 repeat_count;
    bool m_repeat_count_isSet;

    qint32 ramp_up_bits;
    bool m_ramp_up_bits_isSet;

    qint32 ramp_down_bits;
    bool m_ramp_down_bits_isSet;

    qint32 ramp_range;
    bool m_ramp_range_isSet;

    qint32 modulate_while_ramping;
    bool m_modulate_while_ramping_isSet;

    qint32 lpf_taps;
    bool m_lpf_taps_isSet;

    qint32 bb_noise;
    bool m_bb_noise_isSet;

    qint32 write_to_file;
    bool m_write_to_file_isSet;

    qint32 spectrum_rate;
    bool m_spectrum_rate_isSet;

    QString* data;
    bool m_data_isSet;

    qint32 rgb_color;
    bool m_rgb_color_isSet;

    QString* title;
    bool m_title_isSet;

    qint32 stream_index;
    bool m_stream_index_isSet;

    qint32 use_reverse_api;
    bool m_use_reverse_api_isSet;

    QString* reverse_api_address;
    bool m_reverse_api_address_isSet;

    qint32 reverse_api_port;
    bool m_reverse_api_port_isSet;

    qint32 reverse_api_device_index;
    bool m_reverse_api_device_index_isSet;

    qint32 reverse_api_channel_index;
    bool m_reverse_api_channel_index_isSet;

    qint32 scramble;
    bool m_scramble_isSet;

    qint32 polynomial;
    bool m_polynomial_isSet;

    qint32 pulse_shaping;
    bool m_pulse_shaping_isSet;

    float beta;
    bool m_beta_isSet;

    qint32 symbol_span;
    bool m_symbol_span_isSet;

    qint32 udp_enabled;
    bool m_udp_enabled_isSet;

    qint32 udp_bytes_format;
    bool m_udp_bytes_format_isSet;

    QString* udp_address;
    bool m_udp_address_isSet;

    qint32 udp_port;
    bool m_udp_port_isSet;

    SWGChannelMarker* channel_marker;
    bool m_channel_marker_isSet;

    SWGRollupState* rollup_state;
    bool m_rollup_state_isSet;

};

}

#endif /* SWGIEEE_802_15_4_ModSettings_H_ */
