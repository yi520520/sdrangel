/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 7.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGDOA2Report.h
 *
 * DOA2
 */

#ifndef SWGDOA2Report_H_
#define SWGDOA2Report_H_

#include <QJsonObject>



#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGDOA2Report: public SWGObject {
public:
    SWGDOA2Report();
    SWGDOA2Report(QString* json);
    virtual ~SWGDOA2Report();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGDOA2Report* fromJson(QString &jsonString) override;

    qint32 getPhi();
    void setPhi(qint32 phi);

    qint32 getPosAz();
    void setPosAz(qint32 pos_az);

    qint32 getNegAz();
    void setNegAz(qint32 neg_az);

    qint32 getBlindAngle();
    void setBlindAngle(qint32 blind_angle);

    qint32 getFftSize();
    void setFftSize(qint32 fft_size);

    qint32 getChannelSampleRate();
    void setChannelSampleRate(qint32 channel_sample_rate);


    virtual bool isSet() override;

private:
    qint32 phi;
    bool m_phi_isSet;

    qint32 pos_az;
    bool m_pos_az_isSet;

    qint32 neg_az;
    bool m_neg_az_isSet;

    qint32 blind_angle;
    bool m_blind_angle_isSet;

    qint32 fft_size;
    bool m_fft_size_isSet;

    qint32 channel_sample_rate;
    bool m_channel_sample_rate_isSet;

};

}

#endif /* SWGDOA2Report_H_ */
