/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 7.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGFreqScannerSettings.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace SWGSDRangel {

SWGFreqScannerSettings::SWGFreqScannerSettings(QString* json) {
    init();
    this->fromJson(*json);
}

SWGFreqScannerSettings::SWGFreqScannerSettings() {
    channel_bandwidth = 0;
    m_channel_bandwidth_isSet = false;
    channel_frequency_offset = 0;
    m_channel_frequency_offset_isSet = false;
    threshold = 0.0f;
    m_threshold_isSet = false;
    frequencies = nullptr;
    m_frequencies_isSet = false;
    channel = nullptr;
    m_channel_isSet = false;
    scan_time = 0.0f;
    m_scan_time_isSet = false;
    retransmit_time = 0.0f;
    m_retransmit_time_isSet = false;
    tune_time = 0.0f;
    m_tune_time_isSet = false;
    priority = 0;
    m_priority_isSet = false;
    measurement = 0;
    m_measurement_isSet = false;
    mode = 0;
    m_mode_isSet = false;
    rgb_color = 0;
    m_rgb_color_isSet = false;
    title = nullptr;
    m_title_isSet = false;
    stream_index = 0;
    m_stream_index_isSet = false;
    use_reverse_api = 0;
    m_use_reverse_api_isSet = false;
    reverse_api_address = nullptr;
    m_reverse_api_address_isSet = false;
    reverse_api_port = 0;
    m_reverse_api_port_isSet = false;
    reverse_api_device_index = 0;
    m_reverse_api_device_index_isSet = false;
    reverse_api_channel_index = 0;
    m_reverse_api_channel_index_isSet = false;
    channel_marker = nullptr;
    m_channel_marker_isSet = false;
    rollup_state = nullptr;
    m_rollup_state_isSet = false;
}

SWGFreqScannerSettings::~SWGFreqScannerSettings() {
    this->cleanup();
}

void
SWGFreqScannerSettings::init() {
    channel_bandwidth = 0;
    m_channel_bandwidth_isSet = false;
    channel_frequency_offset = 0;
    m_channel_frequency_offset_isSet = false;
    threshold = 0.0f;
    m_threshold_isSet = false;
    frequencies = new QList<SWGFreqScannerFrequency*>();
    m_frequencies_isSet = false;
    channel = new QString("");
    m_channel_isSet = false;
    scan_time = 0.0f;
    m_scan_time_isSet = false;
    retransmit_time = 0.0f;
    m_retransmit_time_isSet = false;
    tune_time = 0.0f;
    m_tune_time_isSet = false;
    priority = 0;
    m_priority_isSet = false;
    measurement = 0;
    m_measurement_isSet = false;
    mode = 0;
    m_mode_isSet = false;
    rgb_color = 0;
    m_rgb_color_isSet = false;
    title = new QString("");
    m_title_isSet = false;
    stream_index = 0;
    m_stream_index_isSet = false;
    use_reverse_api = 0;
    m_use_reverse_api_isSet = false;
    reverse_api_address = new QString("");
    m_reverse_api_address_isSet = false;
    reverse_api_port = 0;
    m_reverse_api_port_isSet = false;
    reverse_api_device_index = 0;
    m_reverse_api_device_index_isSet = false;
    reverse_api_channel_index = 0;
    m_reverse_api_channel_index_isSet = false;
    channel_marker = new SWGChannelMarker();
    m_channel_marker_isSet = false;
    rollup_state = new SWGRollupState();
    m_rollup_state_isSet = false;
}

void
SWGFreqScannerSettings::cleanup() {



    if(frequencies != nullptr) { 
        auto arr = frequencies;
        for(auto o: *arr) { 
            delete o;
        }
        delete frequencies;
    }
    if(channel != nullptr) { 
        delete channel;
    }







    if(title != nullptr) { 
        delete title;
    }


    if(reverse_api_address != nullptr) { 
        delete reverse_api_address;
    }



    if(channel_marker != nullptr) { 
        delete channel_marker;
    }
    if(rollup_state != nullptr) { 
        delete rollup_state;
    }
}

SWGFreqScannerSettings*
SWGFreqScannerSettings::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGFreqScannerSettings::fromJsonObject(QJsonObject &pJson) {
    ::SWGSDRangel::setValue(&channel_bandwidth, pJson["channelBandwidth"], "qint32", "");
    
    ::SWGSDRangel::setValue(&channel_frequency_offset, pJson["channelFrequencyOffset"], "qint32", "");
    
    ::SWGSDRangel::setValue(&threshold, pJson["threshold"], "float", "");
    
    
    ::SWGSDRangel::setValue(&frequencies, pJson["frequencies"], "QList", "SWGFreqScannerFrequency");
    ::SWGSDRangel::setValue(&channel, pJson["channel"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&scan_time, pJson["scanTime"], "float", "");
    
    ::SWGSDRangel::setValue(&retransmit_time, pJson["retransmitTime"], "float", "");
    
    ::SWGSDRangel::setValue(&tune_time, pJson["tuneTime"], "float", "");
    
    ::SWGSDRangel::setValue(&priority, pJson["priority"], "qint32", "");
    
    ::SWGSDRangel::setValue(&measurement, pJson["measurement"], "qint32", "");
    
    ::SWGSDRangel::setValue(&mode, pJson["mode"], "qint32", "");
    
    ::SWGSDRangel::setValue(&rgb_color, pJson["rgbColor"], "qint32", "");
    
    ::SWGSDRangel::setValue(&title, pJson["title"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&stream_index, pJson["streamIndex"], "qint32", "");
    
    ::SWGSDRangel::setValue(&use_reverse_api, pJson["useReverseAPI"], "qint32", "");
    
    ::SWGSDRangel::setValue(&reverse_api_address, pJson["reverseAPIAddress"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&reverse_api_port, pJson["reverseAPIPort"], "qint32", "");
    
    ::SWGSDRangel::setValue(&reverse_api_device_index, pJson["reverseAPIDeviceIndex"], "qint32", "");
    
    ::SWGSDRangel::setValue(&reverse_api_channel_index, pJson["reverseAPIChannelIndex"], "qint32", "");
    
    ::SWGSDRangel::setValue(&channel_marker, pJson["channelMarker"], "SWGChannelMarker", "SWGChannelMarker");
    
    ::SWGSDRangel::setValue(&rollup_state, pJson["rollupState"], "SWGRollupState", "SWGRollupState");
    
}

QString
SWGFreqScannerSettings::asJson ()
{
    QJsonObject* obj = this->asJsonObject();

    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    delete obj;
    return QString(bytes);
}

QJsonObject*
SWGFreqScannerSettings::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    if(m_channel_bandwidth_isSet){
        obj->insert("channelBandwidth", QJsonValue(channel_bandwidth));
    }
    if(m_channel_frequency_offset_isSet){
        obj->insert("channelFrequencyOffset", QJsonValue(channel_frequency_offset));
    }
    if(m_threshold_isSet){
        obj->insert("threshold", QJsonValue(threshold));
    }
    if(frequencies && frequencies->size() > 0){
        toJsonArray((QList<void*>*)frequencies, obj, "frequencies", "SWGFreqScannerFrequency");
    }
    if(channel != nullptr && *channel != QString("")){
        toJsonValue(QString("channel"), channel, obj, QString("QString"));
    }
    if(m_scan_time_isSet){
        obj->insert("scanTime", QJsonValue(scan_time));
    }
    if(m_retransmit_time_isSet){
        obj->insert("retransmitTime", QJsonValue(retransmit_time));
    }
    if(m_tune_time_isSet){
        obj->insert("tuneTime", QJsonValue(tune_time));
    }
    if(m_priority_isSet){
        obj->insert("priority", QJsonValue(priority));
    }
    if(m_measurement_isSet){
        obj->insert("measurement", QJsonValue(measurement));
    }
    if(m_mode_isSet){
        obj->insert("mode", QJsonValue(mode));
    }
    if(m_rgb_color_isSet){
        obj->insert("rgbColor", QJsonValue(rgb_color));
    }
    if(title != nullptr && *title != QString("")){
        toJsonValue(QString("title"), title, obj, QString("QString"));
    }
    if(m_stream_index_isSet){
        obj->insert("streamIndex", QJsonValue(stream_index));
    }
    if(m_use_reverse_api_isSet){
        obj->insert("useReverseAPI", QJsonValue(use_reverse_api));
    }
    if(reverse_api_address != nullptr && *reverse_api_address != QString("")){
        toJsonValue(QString("reverseAPIAddress"), reverse_api_address, obj, QString("QString"));
    }
    if(m_reverse_api_port_isSet){
        obj->insert("reverseAPIPort", QJsonValue(reverse_api_port));
    }
    if(m_reverse_api_device_index_isSet){
        obj->insert("reverseAPIDeviceIndex", QJsonValue(reverse_api_device_index));
    }
    if(m_reverse_api_channel_index_isSet){
        obj->insert("reverseAPIChannelIndex", QJsonValue(reverse_api_channel_index));
    }
    if((channel_marker != nullptr) && (channel_marker->isSet())){
        toJsonValue(QString("channelMarker"), channel_marker, obj, QString("SWGChannelMarker"));
    }
    if((rollup_state != nullptr) && (rollup_state->isSet())){
        toJsonValue(QString("rollupState"), rollup_state, obj, QString("SWGRollupState"));
    }

    return obj;
}

qint32
SWGFreqScannerSettings::getChannelBandwidth() {
    return channel_bandwidth;
}
void
SWGFreqScannerSettings::setChannelBandwidth(qint32 channel_bandwidth) {
    this->channel_bandwidth = channel_bandwidth;
    this->m_channel_bandwidth_isSet = true;
}

qint32
SWGFreqScannerSettings::getChannelFrequencyOffset() {
    return channel_frequency_offset;
}
void
SWGFreqScannerSettings::setChannelFrequencyOffset(qint32 channel_frequency_offset) {
    this->channel_frequency_offset = channel_frequency_offset;
    this->m_channel_frequency_offset_isSet = true;
}

float
SWGFreqScannerSettings::getThreshold() {
    return threshold;
}
void
SWGFreqScannerSettings::setThreshold(float threshold) {
    this->threshold = threshold;
    this->m_threshold_isSet = true;
}

QList<SWGFreqScannerFrequency*>*
SWGFreqScannerSettings::getFrequencies() {
    return frequencies;
}
void
SWGFreqScannerSettings::setFrequencies(QList<SWGFreqScannerFrequency*>* frequencies) {
    this->frequencies = frequencies;
    this->m_frequencies_isSet = true;
}

QString*
SWGFreqScannerSettings::getChannel() {
    return channel;
}
void
SWGFreqScannerSettings::setChannel(QString* channel) {
    this->channel = channel;
    this->m_channel_isSet = true;
}

float
SWGFreqScannerSettings::getScanTime() {
    return scan_time;
}
void
SWGFreqScannerSettings::setScanTime(float scan_time) {
    this->scan_time = scan_time;
    this->m_scan_time_isSet = true;
}

float
SWGFreqScannerSettings::getRetransmitTime() {
    return retransmit_time;
}
void
SWGFreqScannerSettings::setRetransmitTime(float retransmit_time) {
    this->retransmit_time = retransmit_time;
    this->m_retransmit_time_isSet = true;
}

float
SWGFreqScannerSettings::getTuneTime() {
    return tune_time;
}
void
SWGFreqScannerSettings::setTuneTime(float tune_time) {
    this->tune_time = tune_time;
    this->m_tune_time_isSet = true;
}

qint32
SWGFreqScannerSettings::getPriority() {
    return priority;
}
void
SWGFreqScannerSettings::setPriority(qint32 priority) {
    this->priority = priority;
    this->m_priority_isSet = true;
}

qint32
SWGFreqScannerSettings::getMeasurement() {
    return measurement;
}
void
SWGFreqScannerSettings::setMeasurement(qint32 measurement) {
    this->measurement = measurement;
    this->m_measurement_isSet = true;
}

qint32
SWGFreqScannerSettings::getMode() {
    return mode;
}
void
SWGFreqScannerSettings::setMode(qint32 mode) {
    this->mode = mode;
    this->m_mode_isSet = true;
}

qint32
SWGFreqScannerSettings::getRgbColor() {
    return rgb_color;
}
void
SWGFreqScannerSettings::setRgbColor(qint32 rgb_color) {
    this->rgb_color = rgb_color;
    this->m_rgb_color_isSet = true;
}

QString*
SWGFreqScannerSettings::getTitle() {
    return title;
}
void
SWGFreqScannerSettings::setTitle(QString* title) {
    this->title = title;
    this->m_title_isSet = true;
}

qint32
SWGFreqScannerSettings::getStreamIndex() {
    return stream_index;
}
void
SWGFreqScannerSettings::setStreamIndex(qint32 stream_index) {
    this->stream_index = stream_index;
    this->m_stream_index_isSet = true;
}

qint32
SWGFreqScannerSettings::getUseReverseApi() {
    return use_reverse_api;
}
void
SWGFreqScannerSettings::setUseReverseApi(qint32 use_reverse_api) {
    this->use_reverse_api = use_reverse_api;
    this->m_use_reverse_api_isSet = true;
}

QString*
SWGFreqScannerSettings::getReverseApiAddress() {
    return reverse_api_address;
}
void
SWGFreqScannerSettings::setReverseApiAddress(QString* reverse_api_address) {
    this->reverse_api_address = reverse_api_address;
    this->m_reverse_api_address_isSet = true;
}

qint32
SWGFreqScannerSettings::getReverseApiPort() {
    return reverse_api_port;
}
void
SWGFreqScannerSettings::setReverseApiPort(qint32 reverse_api_port) {
    this->reverse_api_port = reverse_api_port;
    this->m_reverse_api_port_isSet = true;
}

qint32
SWGFreqScannerSettings::getReverseApiDeviceIndex() {
    return reverse_api_device_index;
}
void
SWGFreqScannerSettings::setReverseApiDeviceIndex(qint32 reverse_api_device_index) {
    this->reverse_api_device_index = reverse_api_device_index;
    this->m_reverse_api_device_index_isSet = true;
}

qint32
SWGFreqScannerSettings::getReverseApiChannelIndex() {
    return reverse_api_channel_index;
}
void
SWGFreqScannerSettings::setReverseApiChannelIndex(qint32 reverse_api_channel_index) {
    this->reverse_api_channel_index = reverse_api_channel_index;
    this->m_reverse_api_channel_index_isSet = true;
}

SWGChannelMarker*
SWGFreqScannerSettings::getChannelMarker() {
    return channel_marker;
}
void
SWGFreqScannerSettings::setChannelMarker(SWGChannelMarker* channel_marker) {
    this->channel_marker = channel_marker;
    this->m_channel_marker_isSet = true;
}

SWGRollupState*
SWGFreqScannerSettings::getRollupState() {
    return rollup_state;
}
void
SWGFreqScannerSettings::setRollupState(SWGRollupState* rollup_state) {
    this->rollup_state = rollup_state;
    this->m_rollup_state_isSet = true;
}


bool
SWGFreqScannerSettings::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_channel_bandwidth_isSet){
            isObjectUpdated = true; break;
        }
        if(m_channel_frequency_offset_isSet){
            isObjectUpdated = true; break;
        }
        if(m_threshold_isSet){
            isObjectUpdated = true; break;
        }
        if(frequencies && (frequencies->size() > 0)){
            isObjectUpdated = true; break;
        }
        if(channel && *channel != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_scan_time_isSet){
            isObjectUpdated = true; break;
        }
        if(m_retransmit_time_isSet){
            isObjectUpdated = true; break;
        }
        if(m_tune_time_isSet){
            isObjectUpdated = true; break;
        }
        if(m_priority_isSet){
            isObjectUpdated = true; break;
        }
        if(m_measurement_isSet){
            isObjectUpdated = true; break;
        }
        if(m_mode_isSet){
            isObjectUpdated = true; break;
        }
        if(m_rgb_color_isSet){
            isObjectUpdated = true; break;
        }
        if(title && *title != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_stream_index_isSet){
            isObjectUpdated = true; break;
        }
        if(m_use_reverse_api_isSet){
            isObjectUpdated = true; break;
        }
        if(reverse_api_address && *reverse_api_address != QString("")){
            isObjectUpdated = true; break;
        }
        if(m_reverse_api_port_isSet){
            isObjectUpdated = true; break;
        }
        if(m_reverse_api_device_index_isSet){
            isObjectUpdated = true; break;
        }
        if(m_reverse_api_channel_index_isSet){
            isObjectUpdated = true; break;
        }
        if(channel_marker && channel_marker->isSet()){
            isObjectUpdated = true; break;
        }
        if(rollup_state && rollup_state->isSet()){
            isObjectUpdated = true; break;
        }
    }while(false);
    return isObjectUpdated;
}
}

