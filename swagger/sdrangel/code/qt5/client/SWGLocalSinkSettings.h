/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 7.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGLocalSinkSettings.h
 *
 * Local channel sink settings
 */

#ifndef SWGLocalSinkSettings_H_
#define SWGLocalSinkSettings_H_

#include <QJsonObject>


#include "SWGChannelMarker.h"
#include "SWGFFTBand.h"
#include "SWGRollupState.h"
#include <QList>
#include <QString>

#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGLocalSinkSettings: public SWGObject {
public:
    SWGLocalSinkSettings();
    SWGLocalSinkSettings(QString* json);
    virtual ~SWGLocalSinkSettings();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGLocalSinkSettings* fromJson(QString &jsonString) override;

    qint32 getLocalDeviceIndex();
    void setLocalDeviceIndex(qint32 local_device_index);

    qint32 getRgbColor();
    void setRgbColor(qint32 rgb_color);

    QString* getTitle();
    void setTitle(QString* title);

    qint32 getLog2Decim();
    void setLog2Decim(qint32 log2_decim);

    qint32 getFilterChainHash();
    void setFilterChainHash(qint32 filter_chain_hash);

    qint32 getPlay();
    void setPlay(qint32 play);

    qint32 getDsp();
    void setDsp(qint32 dsp);

    qint32 getGaindB();
    void setGaindB(qint32 gaind_b);

    qint32 getFftOn();
    void setFftOn(qint32 fft_on);

    qint32 getLog2Fft();
    void setLog2Fft(qint32 log2_fft);

    qint32 getFftWindow();
    void setFftWindow(qint32 fft_window);

    QList<SWGFFTBand*>* getFftBands();
    void setFftBands(QList<SWGFFTBand*>* fft_bands);

    qint32 getReverseFilter();
    void setReverseFilter(qint32 reverse_filter);

    qint32 getStreamIndex();
    void setStreamIndex(qint32 stream_index);

    qint32 getUseReverseApi();
    void setUseReverseApi(qint32 use_reverse_api);

    QString* getReverseApiAddress();
    void setReverseApiAddress(QString* reverse_api_address);

    qint32 getReverseApiPort();
    void setReverseApiPort(qint32 reverse_api_port);

    qint32 getReverseApiDeviceIndex();
    void setReverseApiDeviceIndex(qint32 reverse_api_device_index);

    qint32 getReverseApiChannelIndex();
    void setReverseApiChannelIndex(qint32 reverse_api_channel_index);

    SWGChannelMarker* getChannelMarker();
    void setChannelMarker(SWGChannelMarker* channel_marker);

    SWGRollupState* getRollupState();
    void setRollupState(SWGRollupState* rollup_state);


    virtual bool isSet() override;

private:
    qint32 local_device_index;
    bool m_local_device_index_isSet;

    qint32 rgb_color;
    bool m_rgb_color_isSet;

    QString* title;
    bool m_title_isSet;

    qint32 log2_decim;
    bool m_log2_decim_isSet;

    qint32 filter_chain_hash;
    bool m_filter_chain_hash_isSet;

    qint32 play;
    bool m_play_isSet;

    qint32 dsp;
    bool m_dsp_isSet;

    qint32 gaind_b;
    bool m_gaind_b_isSet;

    qint32 fft_on;
    bool m_fft_on_isSet;

    qint32 log2_fft;
    bool m_log2_fft_isSet;

    qint32 fft_window;
    bool m_fft_window_isSet;

    QList<SWGFFTBand*>* fft_bands;
    bool m_fft_bands_isSet;

    qint32 reverse_filter;
    bool m_reverse_filter_isSet;

    qint32 stream_index;
    bool m_stream_index_isSet;

    qint32 use_reverse_api;
    bool m_use_reverse_api_isSet;

    QString* reverse_api_address;
    bool m_reverse_api_address_isSet;

    qint32 reverse_api_port;
    bool m_reverse_api_port_isSet;

    qint32 reverse_api_device_index;
    bool m_reverse_api_device_index_isSet;

    qint32 reverse_api_channel_index;
    bool m_reverse_api_channel_index_isSet;

    SWGChannelMarker* channel_marker;
    bool m_channel_marker_isSet;

    SWGRollupState* rollup_state;
    bool m_rollup_state_isSet;

};

}

#endif /* SWGLocalSinkSettings_H_ */
