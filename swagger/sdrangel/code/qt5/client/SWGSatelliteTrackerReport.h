/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 7.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGSatelliteTrackerReport.h
 *
 * Satellite Tracker report
 */

#ifndef SWGSatelliteTrackerReport_H_
#define SWGSatelliteTrackerReport_H_

#include <QJsonObject>


#include "SWGSatelliteState.h"
#include <QList>

#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGSatelliteTrackerReport: public SWGObject {
public:
    SWGSatelliteTrackerReport();
    SWGSatelliteTrackerReport(QString* json);
    virtual ~SWGSatelliteTrackerReport();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGSatelliteTrackerReport* fromJson(QString &jsonString) override;

    qint32 getRunningState();
    void setRunningState(qint32 running_state);

    float getTargetAzimuth();
    void setTargetAzimuth(float target_azimuth);

    float getTargetElevation();
    void setTargetElevation(float target_elevation);

    QList<SWGSatelliteState*>* getSatelliteState();
    void setSatelliteState(QList<SWGSatelliteState*>* satellite_state);


    virtual bool isSet() override;

private:
    qint32 running_state;
    bool m_running_state_isSet;

    float target_azimuth;
    bool m_target_azimuth_isSet;

    float target_elevation;
    bool m_target_elevation_isSet;

    QList<SWGSatelliteState*>* satellite_state;
    bool m_satellite_state_isSet;

};

}

#endif /* SWGSatelliteTrackerReport_H_ */
